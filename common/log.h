#ifndef LOG_H
#define LOG_H


#include <QtCore/QString>
/*
 * 多个参数时使用LOG_TRACE
 */
//因为msvc的先展开被嵌套的宏，再替换的原则，OBSCURE_EXPAND宏占用规则的第一步——展开被嵌套宏的作用，
//用从而使变参能够展开,否则先展开，则变长参数只能顶替一个参数(不被认为是多个参数)
//如LOG_TRACE_VER ,如果没有OBSCURE_EXPAND ，则先展开为ARGS_COUNT_HELPER(__VA_ARGS__, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, N, ...) N
//这里__VA_ARGS__执行了替换，不会展开了，
//如果有OBSCURE_EXPAND，则先展开为ARGS_COUNT_HELPER(__VA_ARGS__, ...), 第二步替换，则__VA_ARGS__被展开
#define OBSCURE_EXPAND(arg) arg
#define ARGS_COUNT_HELPER(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, N, ...)  N

#define LOG_TRACE_VER(...) OBSCURE_EXPAND(ARGS_COUNT_HELPER(__VA_ARGS__,             \
    LOG_TRACE_10,                                                                    \
    LOG_TRACE_9,                                                                     \
    LOG_TRACE_8,                                                                     \
    LOG_TRACE_7,                                                                     \
    LOG_TRACE_6,                                                                     \
    LOG_TRACE_5,                                                                     \
    LOG_TRACE_4,                                                                     \
    LOG_TRACE_3,                                                                     \
    LOG_TRACE_2,                                                                     \
    LOG_TRACE_1,                                                                     \
    LOG_TRACE_0))   




#define LOG_TRACE_0(_0)                               
    

#define LOG_TRACE_1(_0, _1)                                                 \
            << " " << #_1 << ":" << _1

#define LOG_TRACE_2(_0,  _1, _2)                                        \
            << " " << #_1 << ":" << _1                                  \
            << ", " << #_2 << ":" << _2

#define LOG_TRACE_3(_0,  _1, _2, _3)                                    \
            << " " << #_1 << ":" << _1                                  \
            << ", " << #_2 << ":" << _2                                 \
            << ", " << #_3 << ":" << _3

#define LOG_TRACE_4(_0,  _1, _2, _3, _4)                                \
            << " " << #_1 << ":" << _1                                  \
            << ", " << #_2 << ":" << _2                                 \
            << ", " << #_3 << ":" << _3                                 \
            << ", " << #_4 << ":" << _4

#define LOG_TRACE_5(_0,  _1, _2, _3, _4, _5)                            \
            << " " << #_1 << ":" << _1                                  \
            << ", " << #_2 << ":" << _2                                 \
            << ", " << #_3 << ":" << _3                                 \
            << ", " << #_4 << ":" << _4                                 \
            << ", " << #_5 << ":" << _5

#define LOG_TRACE_6(_0,  _1, _2, _3, _4, _5, _6)                        \
            << " " << #_1 << ":" << _1                                  \
            << ", " << #_2 << ":" << _2                                 \
            << ", " << #_3 << ":" << _3                                 \
            << ", " << #_4 << ":" << _4                                 \
            << ", " << #_5 << ":" << _5                                 \
            << ", " << #_6 << ":" << _6


#define LOG_TRACE_7(_0,  _1, _2, _3, _4, _5, _6, _7)                    \
            << " " << #_1 << ":" << _1                                  \
            << ", " << #_2 << ":" << _2                                 \
            << ", " << #_3 << ":" << _3                                 \
            << ", " << #_4 << ":" << _4                                 \
            << ", " << #_5 << ":" << _5                                 \
            << ", " << #_6 << ":" << _6                                 \
            << ", " << #_7 << ":" << _7

#define LOG_TRACE_8(_0,  _1, _2, _3, _4, _5, _6, _7, _8)                \
            << " " << #_1 << ":" << _1                                  \
            << ", " << #_2 << ":" << _2                                 \
            << ", " << #_3 << ":" << _3                                 \
            << ", " << #_4 << ":" << _4                                 \
            << ", " << #_5 << ":" << _5                                 \
            << ", " << #_6 << ":" << _6                                 \
            << ", " << #_7 << ":" << _7                                 \
            << ", " << #_8 << ":" << _8


#define LOG_TRACE_9(_0,  _1, _2, _3, _4, _5, _6, _7, _8, _9)            \
            << " " << #_1 << ":" << _1                                  \
            << ", " << #_2 << ":" << _2                                 \
            << ", " << #_3 << ":" << _3                                 \
            << ", " << #_4 << ":" << _4                                 \
            << ", " << #_5 << ":" << _5                                 \
            << ", " << #_6 << ":" << _6                                 \
            << ", " << #_7 << ":" << _7                                 \
            << ", " << #_8 << ":" << _8                                 \
            << ", " << #_9 << ":" << _9

#define LOG_TRACE_10(_0,  _1, _2, _3, _4, _5, _6, _7, _8, _9, _10)      \
            << " " << #_1 << ":" << _1                                  \
            << ", " << #_2 << ":" << _2                                 \
            << ", " << #_3 << ":" << _3                                 \
            << ", " << #_4 << ":" << _4                                 \
            << ", " << #_5 << ":" << _5                                 \
            << ", " << #_6 << ":" << _6                                 \
            << ", " << #_7 << ":" << _7                                 \
            << ", " << #_8 << ":" << _8                                 \
            << ", " << #_9 << ":" << _9                                 \
            << ", " << #_10 << ":" << _10

//暂时最多支持携带10个参数的推导, 支持的参数类型见QDebug


static void fun(int a, ...)
{

}

#define LOG_TRACE0(way)                         \
  way() << __FUNCTION__ << "@"<<__LINE__

#define LOG_TRACE(way, ...)                         \
  way() << __FUNCTION__ << "@"<<__LINE__ << ", " OBSCURE_EXPAND(LOG_TRACE_REAL( __VA_ARGS__))


#ifdef _MSC_VER
#define LOG_TRACE_REAL(...) OBSCURE_EXPAND(LOG_TRACE_VER(__VA_ARGS__)(__VA_ARGS__))
#else
#error "can't guarantee on other compiler except MSVC"
#endif

#endif
